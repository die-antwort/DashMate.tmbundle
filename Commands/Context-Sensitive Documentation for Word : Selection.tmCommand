<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/bin/ruby

require 'cgi'

# target the current selection or the current
# word if selection is empty
def target_text
  selection = ENV['TM_SELECTED_TEXT']
  current_word = ENV['TM_CURRENT_WORD']
  current_line = ENV['TM_CURRENT_LINE']
  
  return CGI.escape(selection) if selection &amp;&amp; selection != ""
  
  text = if language_scopes.include?("haml")
    # include leading : (HAML filter syntax), if present
    /:?#{Regexp.escape current_word}/.match(current_line)[0]
  elsif language_scopes.include?("sass") || language_scopes.include?("scss") || language_scopes.include?("css")
    # since dash (‘-’) is not a word character, extend current word to neighboring word and dash characters
    /[-\w]*#{Regexp.escape current_word}[-\w]*/.match(current_line)[0]
  elsif language_scopes.include?("ruby")
    # include trailing ! or ?, if present.
    /#{Regexp.escape current_word}[!?]?/.match(current_line)[0]
  else
    current_word || ""
  end
  target = CGI.escape(text)
end

def language_scopes
  # create a list of exceptions where we do not want to
  # pass the lang scope to the command line Dash command
  lang_exceptions = []

  # Identify "source" scopes; ones that represent languages
  # Also include "text" scopes (e.g. "text.html")
  source_scopes = ENV['TM_SCOPE'].split(" ").select {|s| s =~ /^(source|text)\./}

  # Restructure to match key format in language_map
  # Examples:
  # []                                          =&gt; []
  # ["source.language"]                         =&gt; ["language"]
  # ["source.language.dialect"]                 =&gt; ["language.dialect", "language"]
  # ["source.language", "source.otherlanguage"] =&gt; ["language", "other_language"]
  #
  scopes = (source_scopes || []).map do |source|
    lang = source.split(".").slice(1..-1)
    lang.map.with_index do |x, i|
      (lang.slice(0, i) + [x]).join('.')
    end.reverse
  end.flatten

  # Filter out anything in the lang_exceptions list
  scopes.reject { |l| lang_exceptions.include?(l) }
end

# figure out the current language from the TM_SCOPE variable
# take something like the following string and figure out that it's ruby
# "source.ruby attr.os-version.10.8.3 attr.untitled dyn.caret.end.document"
def language
  # convert TM source name to Dash docset keyword
  # http://kapeli.com/guide/guide#searchProfiles
  language_map = {
    "c"               =&gt; "c,glib,gl2,gl3,gl4,manpages",
    "c++"             =&gt; "cpp,net,boost,qt,cvcpp,cocos2dx,c,manpages",
    "c#"              =&gt; "net,mono,unity3d",
    "coffee"          =&gt; "coffee,javascript,jquery,jqueryui,jquerym,backbone,marionette,meteor,sproutcore,moo,prototype,bootstrap,foundation,lodash,underscore,ember,sencha,extjs,knockout,zepto,yui,d3,svg,dojo,nodejs,express,mongoose,moment,require,awsjs,jasmine,sinon,grunt,chai,html,css,cordova,phonegap,unity3d",
    "css"             =&gt; "css,bootstrap,foundation,less,awesome,cordova,phonegap",
    "dart"            =&gt; "dartlang,polymerdart,angulardart",
    "haml"            =&gt; "haml,html,svg,bootstrap,foundation,awesome,statamic,javascript,jquery,jqueryui,jquerym,angularjs,backbone,marionette,meteor,moo,prototype,ember,lodash,underscore,sencha,extjs,knockout,zepto,cordova,phonegap,yui",
    "html"            =&gt; "html,svg,css,bootstrap,foundation,awesome,statamic,javascript,jquery,jqueryui,jquerym,angularjs,backbone,marionette,meteor,moo,prototype,ember,lodash,underscore,sencha,extjs,knockout,zepto,cordova,phonegap,yui",
    "java"            =&gt; "java,javafx,grails,groovy,playjava,spring,cvj,processing,javadoc",
    "java-properties" =&gt; "java,javafx,grails,groovy,playjava,spring,cvj,processing,javadoc",
    "jsp"             =&gt; "java,javafx,grails,groovy,playjava,spring,cvj,processing,javadoc",
    "js"              =&gt; "javascript,jquery,jqueryui,jquerym,backbone,marionette,meteor,sproutcore,moo,prototype,bootstrap,foundation,lodash,underscore,ember,sencha,extjs,knockout,zepto,yui,d3,svg,dojo,coffee,nodejs,express,mongoose,moment,require,awsjs,jasmine,sinon,grunt,chai,html,css,cordova,phonegap,unity3d",
    "lua"             =&gt; "lua,corona",
    "mod-perl"        =&gt; "perl,manpages",
    "objc"            =&gt; "iphoneos,macosx,appledoc,cocos2d,cocos3d,kobold2d,sparrow,c,manpages",
    "objc++"          =&gt; "cpp,iphoneos,macosx,appledoc,cocos2dx,cocos2d,cocos3d,kobold2d,sparrow,cocoapods,c,manpages",
    "php"             =&gt; "php,wordpress,drupal,zend,laravel,yii,joomla,ee,codeigniter,cakephp,phpunit,symfony,typo3,twig,smarty,phpp,html,statamic,mysql,sqlite,mongodb,psql,redis",
    "python"          =&gt; "python,django,twisted,sphinx,flask,tornado,sqlalchemy,numpy,scipy,salt,cvp",
    "ruby"            =&gt; "ruby,rubygems",
    "ruby.rails"      =&gt; "rails",
    "rust"            =&gt; "rust",
    "sass"            =&gt; "css,sass,bootstrap,foundation,less,awesome,cordova,phonegap",
    "scss"            =&gt; "css,sass,bootstrap,foundation,less,awesome,cordova,phonegap",
    "shell"           =&gt; "bash,manpages",
    "slim"            =&gt; "html,svg,css,bootstrap,foundation,awesome,statamic,javascript,jquery,jqueryui,jquerym,angularjs,backbone,marionette,meteor,moo,prototype,ember,lodash,underscore,sencha,extjs,knockout,zepto,cordova,phonegap,yui",
    "sql"             =&gt; "mysql,sqlite,psql",
  }

  # Lookup the docsets for each language
  docsets = language_scopes.map { |l| language_map[l] || l }.join(',')

  return "#{docsets}"
end

command = "open -g dash-plugin://keys=#{language}\\&amp;query=#{target_text}"
# run the command
system command
</string>
	<key>input</key>
	<string>none</string>
	<key>inputFormat</key>
	<string>text</string>
	<key>keyEquivalent</key>
	<string>^h</string>
	<key>name</key>
	<string>Context-Sensitive Documentation for Word / Selection</string>
	<key>outputCaret</key>
	<string>afterOutput</string>
	<key>outputFormat</key>
	<string>text</string>
	<key>outputLocation</key>
	<string>discard</string>
	<key>uuid</key>
	<string>2E2D93CC-8D2B-415E-8A4E-223726CDCD24</string>
	<key>version</key>
	<integer>2</integer>
</dict>
</plist>
